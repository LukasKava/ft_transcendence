# version: '3.8'

services:
  gateway_microservice:
    container_name: gateway_service
    build: ./app/gateway_service
    hostname: apigateway
    networks:
      - backend
      - frontend
    # depends_on:
    #   - authservice
    #   - mailservice
    #   - usermanagement
    # environment:
    #   - SECRET_KEY=${ApiGateway_SECRET_KEY}
    #   - DEBUG=${ApiGateway_DEBUG}
    #   - FRONTEND_URL=${FRONTEND_URL}
    #   - ALLOWED_HOSTS=apigateway,friendservice,gameplayservice,gameservice,statusservice,usermanagement,frontend,authservice,bucketservice
    # volumes:
    #   - ./apigateway:/app

  # statistics_microservice:
  #   container_name: statistics_service
  #   build: ./app/statistics_service
  #   restart: always
  #   networks: 
  #     transcendence:
  #       ipv4_address: 172.20.10.3

  # user_profile_microservice:
  #   container_name: user_profile_service
  #   build: ./app/user_profile_service
  #   restart: always
  #   networks: 
  #     transcendence:
  #       ipv4_address: 172.20.10.4
      
  # matchmaking_microservice:
  #   container_name: matchmaking_service
  #   build: ./app/matchmaking_service
  #   restart: always
  #   networks: 
  #     transcendence:
  #       ipv4_address: 172.20.10.5

  game_django:
    build: app/game_service/
    container_name: game_service
    command: ./script.sh
    ports:
      - "5000:5000"
    depends_on:
      - "game_postgres"
    env_file:
      - .env
    restart: unless-stopped
    networks:
      - "backend"

  game_postgres:
    image: postgres:16
    container_name: postgres_db
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-karolina1}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-123}
    ports:
      - "5432:5432"
    networks:
      - "backend"
    restart: unless-stopped


  # notifications_microservice:
  #   container_name: notifications_service
  #   build: ./app/notifications_service
  #   restart: always
  #   networks: 
  #     transcendence:
  #       ipv4_address: 172.20.10.7

  frontend:
    build: app/frontend_service/
    container_name: frontend_service
    ports:
      - "8081:80"
    networks:
      - "frontend"
    env_file:
      - .env

  # postgres_db:
  #   container_name: postgreSQL
  #   build: ./app/postgreSQL
  #   env_file:
  #     - .env
  #   environment:
  #     POSTGRES_DB: database_name
  #     POSTGRES_USER: karolina1
  #     POSTGRES_PASSWORD: 123
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   networks:
  #     - transcendence

# volumes:
#   postgres_data:

networks:
  frontend:
    name: frontend
    driver: bridge
  backend:
    name: backend
    driver: bridge


